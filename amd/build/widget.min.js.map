{"version":3,"file":"widget.min.js","sources":["../src/widget.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Log from 'core/log';\nimport * as Str from 'core/str';\n\n\nclass WidgetError extends Error {\n    constructor(message, stringKey) {\n        super(message);\n        this.name = 'WidgetError';\n        this.stringKey = stringKey;\n    }\n}\n\nclass NoDataError extends WidgetError {\n    constructor() {\n        super('Not enough data available.', 'no_data_available');\n    }\n}\n\n\nconst moodleComponent = 'lytix_helper';\n\n/**\n * Logs an error and replaces a widget’s content with an error message.\n *\n * @method handleError\n * @param {Error} error The Error that has been thrown;\n *    should also provide ‘stringKey’ for fetching the language string for the user facing message.\n * @param {String} widgetId The widget’s id in the DOM.\n */\nconst handleError = (error, widgetId) => {\n    const widgetContent = document.querySelector('#' + widgetId + ' .content');\n    widgetContent.classList.add('widget-error');\n\n    // XXX: Might not work if the node contains SVG.\n    // Maybe it’s better to replace node entirely?\n    widgetContent.innerHTML = '';\n\n    const\n        frag = document.createDocumentFragment(),\n        span = document.createElement('span'),\n        insertMessage = message => {\n            span.innerText = message;\n            frag.appendChild(span);\n            widgetContent.appendChild(frag);\n            return;\n        };\n\n    // eslint-disable-next-line promise/no-promise-in-callback\n    Str.get_string(error.stringKey || 'generic_error', moodleComponent)\n    .then(string => insertMessage(string))\n    .catch(error => {\n        insertMessage('Something went wrong. Please try reloading or report this incident if the error persists.');\n        Log.debug('Some supplied data could probably not be processed correctly.', error);\n    });\n\n    // An element might be hidden by default to be built outside of the DOM.\n    widgetContent.removeAttribute('hidden');\n\n    Log.debug(error);\n};\n\n\n/**\n * Fetches language strings; basically a wrapper around Str.get_strings().\n *\n * @method getStrings\n * @param {Object} data An object where each property name is the component from which to fetch strings for the given keys.\n *      Each entry holds another object that needs at least one of the following properties: ‘identical’ or ‘differing’.\n *      The former has to be an array of keys, where each key is also used to access the fetched string later on.\n *      The latter must be an object where each property name is the same that is later used for accessing the string,\n *      with its value being the respective key for fetching.\n * @return {Promise} Resolves into an object where each fetched string can be accessed by either the key provided in ‘identical’\n *      or by its property name from ‘differing’. Otherwise rejects with a key for an appropriate error message.\n *      Caution! This is not a native Promise, it is a promise as defined by jQuery!\n */\n\n/* This is an example input:\n {\n    local_plugin_one: {\n        differing: {\n            error: 'error_msg',\n            warning: 'warning_msg',\n            success: 'success_msg',\n        },\n        identical: [ 'person', 'name', 'student' ],\n    },\n    // here, ‘differing’ is optional because ‘identical’ is supplied\n    core_stuff: {\n        identical: [ 'grades', 'scores', 'results' ],\n    },\n} */\nconst getStrings = data => {\n    const\n        components = Object.keys(data),\n        requests = [], // This is what Str.get_strings() wants.\n        referenceKeys = [], // A array of arrays containing keys for later access.\n        lengths = [];\n\n    for (const componentName of components) {\n        const component = data[componentName];\n        if ('identical' in component) {\n            const\n                keys = component.identical,\n                length = keys.length;\n            for (let i = 0; i < length; ++i) {\n                requests.push({\n                    key: keys[i],\n                    component: componentName,\n                });\n            }\n            referenceKeys.push(keys);\n            lengths.push(keys.length);\n        }\n        if ('differing' in component) {\n            const\n                differing = component.differing,\n                objectKeys = Object.keys(differing),\n                length = objectKeys.length;\n            for (let i = 0; i < length; ++i) {\n                requests.push({\n                    key: differing[objectKeys[i]],\n                    component: componentName,\n                });\n            }\n            referenceKeys.push(objectKeys);\n            lengths.push(objectKeys.length);\n        }\n    }\n    return Str.get_strings(requests).then(strings => {\n        const\n            result = {},\n            count = lengths.length;\n        let stringIndex = 0;\n        for (let i = 0; i < count; ++i) {\n            const length = lengths[i];\n            const keys = referenceKeys[i];\n            for (let j = 0; j < length; ++j) {\n                result[keys[j]] = strings[stringIndex++];\n            }\n        }\n        return result;\n    })\n    .catch(error => {\n        Log.debug(error);\n        error.stringKey = 'fetch_failed';\n        throw error;\n    });\n};\n\n\n/**\n * Fetches data and allows validating it.\n *\n * @method getData\n * @param {string} methodname The method to run.\n * @param {args} args An object containing the required arguments for the method (usually courseid and contextid).\n * @return {Promise} Resolves into the fetched object; or rejects with a key for an appropriate error message.\n */\nconst getData = (methodname, args) => {\n    return Ajax.call([{\n        methodname: methodname,\n        args: args,\n    }])[0]\n    .then(data => data)\n    .catch(error => {\n        error.stringKey = 'fetch_failed';\n        throw error;\n    });\n};\n\n\n/*\nImport Templates from 'core/templates';\nconst makeExportFunction = (widgetId) => {\n    // get export button\n    // assign function using Templates.render() to export button\n};\n*/\n\n/**\n * Convert Moodle’s locale to one that can be used with JS.\n *\n * @method convertLocale\n * @param {string} locale The locale provided by Moodle (https://docs.moodle.org/dev/Table_of_locales#Table)\n * @return {string} https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n */\nconst convertLocale = locale => locale.substring(0, locale.indexOf('.')).replace('_', '-');\n\n/**\n * Get a widget’s content container.\n *\n * @method getContentContainer\n * @param {string} widgetId The widget’s id.\n * @return {HTMLElement} The widget’s content\n */\nconst getContentContainer = widgetId => document.querySelector('#' + widgetId + ' .content');\n\nexport default {\n    NoDataError,\n    handleError,\n    getStrings,\n    getData,\n    convertLocale,\n    getContentContainer,\n};\n"],"names":["WidgetError","Error","constructor","message","stringKey","name","NoDataError","handleError","error","widgetId","widgetContent","document","querySelector","classList","add","innerHTML","frag","createDocumentFragment","span","createElement","insertMessage","innerText","appendChild","Str","get_string","then","string","catch","debug","removeAttribute","getStrings","data","components","Object","keys","requests","referenceKeys","lengths","componentName","component","identical","length","i","push","key","differing","objectKeys","get_strings","strings","result","count","stringIndex","j","getData","methodname","args","Ajax","call","convertLocale","locale","substring","indexOf","replace","getContentContainer"],"mappings":"qwCAKMA,oBAAoBC,MACtBC,YAAYC,QAASC,iBACXD,cACDE,KAAO,mBACPD,UAAYA,wBA6LV,CACXE,0BA1LsBN,YACtBE,oBACU,6BAA8B,uBAyLxCK,YA1KgB,CAACC,MAAOC,kBAClBC,cAAgBC,SAASC,cAAc,IAAMH,SAAW,aAC9DC,cAAcG,UAAUC,IAAI,gBAI5BJ,cAAcK,UAAY,SAGtBC,KAAOL,SAASM,yBAChBC,KAAOP,SAASQ,cAAc,QAC9BC,cAAgBjB,UACZe,KAAKG,UAAYlB,QACjBa,KAAKM,YAAYJ,MACjBR,cAAcY,YAAYN,OAKlCO,IAAIC,WAAWhB,MAAMJ,WAAa,gBA7Bd,gBA8BnBqB,MAAKC,QAAUN,cAAcM,UAC7BC,OAAMnB,QACHY,cAAc,0GACVQ,MAAM,gEAAiEpB,UAI/EE,cAAcmB,gBAAgB,uBAE1BD,MAAMpB,QA8IVsB,WA7GeC,aAEXC,WAAaC,OAAOC,KAAKH,MACzBI,SAAW,GACXC,cAAgB,GAChBC,QAAU,OAET,MAAMC,iBAAiBN,WAAY,OAC9BO,UAAYR,KAAKO,kBACnB,cAAeC,UAAW,OAEtBL,KAAOK,UAAUC,UACjBC,OAASP,KAAKO,WACb,IAAIC,EAAI,EAAGA,EAAID,SAAUC,EAC1BP,SAASQ,KAAK,CACVC,IAAKV,KAAKQ,GACVH,UAAWD,gBAGnBF,cAAcO,KAAKT,MACnBG,QAAQM,KAAKT,KAAKO,WAElB,cAAeF,UAAW,OAEtBM,UAAYN,UAAUM,UACtBC,WAAab,OAAOC,KAAKW,WACzBJ,OAASK,WAAWL,WACnB,IAAIC,EAAI,EAAGA,EAAID,SAAUC,EAC1BP,SAASQ,KAAK,CACVC,IAAKC,UAAUC,WAAWJ,IAC1BH,UAAWD,gBAGnBF,cAAcO,KAAKG,YACnBT,QAAQM,KAAKG,WAAWL,gBAGzBlB,IAAIwB,YAAYZ,UAAUV,MAAKuB,gBAE9BC,OAAS,GACTC,MAAQb,QAAQI,WAChBU,YAAc,MACb,IAAIT,EAAI,EAAGA,EAAIQ,QAASR,EAAG,OACtBD,OAASJ,QAAQK,GACjBR,KAAOE,cAAcM,OACtB,IAAIU,EAAI,EAAGA,EAAIX,SAAUW,EAC1BH,OAAOf,KAAKkB,IAAMJ,QAAQG,sBAG3BF,UAEVtB,OAAMnB,2BACCoB,MAAMpB,OACVA,MAAMJ,UAAY,eACZI,UAwDV6C,QA3CY,CAACC,WAAYC,OAClBC,cAAKC,KAAK,CAAC,CACdH,WAAYA,WACZC,KAAMA,QACN,GACH9B,MAAKM,MAAQA,OACbJ,OAAMnB,cACHA,MAAMJ,UAAY,eACZI,SAoCVkD,cAhBkBC,QAAUA,OAAOC,UAAU,EAAGD,OAAOE,QAAQ,MAAMC,QAAQ,IAAK,KAiBlFC,oBARwBtD,UAAYE,SAASC,cAAc,IAAMH,SAAW"}