{"version":3,"file":"percent_rounder.min.js","sources":["../src/percent_rounder.js"],"sourcesContent":["/**\n * Makes sure rounded percentages add up to exactly 100.\n */\nexport default class PercentRounder {\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * This resets internal values and should be called before reusing an instance.\n     */\n    reset() {\n        this.cumulatedValue = 0;\n        this.roundingBaseline = 0;\n    }\n\n    /**\n     * Rounds the provided number incorporating previously rounded values.\n     *\n     * @param {number} percentage - A number smaller or equal to 100.\n     * @return {number} The given number rounded to the next integer, which depends on previously rounded numbers.\n     */\n    round(percentage) {\n        this.cumulatedValue += percentage;\n        const roundedCumulatedValue = Math.round(this.cumulatedValue);\n        const roundedPercentage = roundedCumulatedValue - this.roundingBaseline;\n        this.roundingBaseline = roundedCumulatedValue;\n        return roundedPercentage;\n    }\n}\n"],"names":["PercentRounder","reset","cumulatedValue","roundingBaseline","percentage","roundedCumulatedValue","Math","round","this","roundedPercentage"],"mappings":"8aAGqBA,8MAERC,iHAMT,gBACSC,eAAiB,OACjBC,iBAAmB,uBAS5B,SAAMC,iBACGF,gBAAkBE,eACjBC,sBAAwBC,KAAKC,MAAMC,KAAKN,gBACxCO,kBAAoBJ,sBAAwBG,KAAKL,6BAClDA,iBAAmBE,sBACjBI"}